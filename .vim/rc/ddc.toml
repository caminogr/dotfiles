[[plugins]]
repo = 'Shougo/ddc.vim'
depends = 'denops.vim'
on_event= ['InsertEnter', 'CmdlineEnter']
hook_source = '''
  " echomsg "hook source ddc vim"
  source ~/.vim/rc/plugins/ddc.vim
'''

[[plugins]]
repo = 'Shougo/pum.vim'
on_event= ['InsertEnter', 'CmdlineEnter']
hook_add = '''
nnoremap :       <Cmd>call CommandlinePre()<CR>:
function! CommandlinePre() abort
  cnoremap <Tab>   <Cmd>call pum#map#insert_relative(+1)<CR>
  cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
  cnoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
  cnoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
  cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

  " Overwrite sources
  if !exists('b:prev_buffer_config')
    let b:prev_buffer_config = ddc#custom#get_buffer()
  endif
  call ddc#custom#patch_buffer('cmdlineSources', ['necovim', 'cmdline', 'cmdline-history', 'around'])

  autocmd User DDCCmdlineLeave ++once call CommandlinePost()
  " autocmd InsertEnter <buffer> ++once call CommandlinePost()

  " Enable command line completion
  call ddc#enable_cmdline_completion()
endfunction
function! CommandlinePost() abort
  cunmap <Tab>
  cunmap <S-Tab>
  cunmap <C-n>
  cunmap <C-p>
  cunmap <C-y>
  cunmap <C-e>

  " Restore sources
  if exists('b:prev_buffer_config')
    call ddc#custom#set_buffer(b:prev_buffer_config)
    unlet b:prev_buffer_config
  else
    call ddc#custom#set_buffer({})
  endif
endfunction
'''
hook_source = '''
  inoremap <silent><expr> <Up>
      \ pum#visible() ? '<Cmd>call pum#map#insert_relative(-1)<CR>' : '<Up>'
  inoremap <silent><expr> <Down>
        \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' : '<Down>'
  
  " vsnip mapping
  nmap        st   <Plug>(vsnip-select-text)
  xmap        st   <Plug>(vsnip-select-text)
  nmap        St   <Plug>(vsnip-cut-text)
  xmap        St   <Plug>(vsnip-cut-text)
  
  imap <expr> <TAB>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : ddc#map#pum_visible() ? '<Cmd>call pum#map#confirm()<CR>' : '<TAB>'
  
  smap <expr> <TAB>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : ddc#map#pum_visible() ? '<Cmd>call pum#map#confirm()<CR>' : '<TAB>'
  
  imap <expr> <S-TAB> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-TAB>'
  smap <expr> <S-TAB> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-TAB>'
  
  autocmd User PumCompleteDone call vsnip_integ#on_complete_done(g:pum#completed_item)
  
  
  call ddc#custom#patch_global('completionMenu', 'pum.vim')
  " cmdline settings
  call ddc#custom#patch_global('autoCompleteEvents',
      \ ['InsertEnter', 'TextChangedI', 'TextChangedP', 'CmdlineChanged'])
'''

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc-nvim-lsp'
hook_post_source = '''
  call signature_help#enable()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc-nvim-lsp'
hook_post_source = '''
  call popup_preview#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

# [[plugins]]
# repo = 'Shougo/ddc-sorter_rank'
# on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo='vim-skk/denops-skkeleton.vim'
on_source = 'ddc.vim'
hook_add = '''
  imap <C-]> <Plug>(skkeleton-toggle)
  " cmap <C-j> <Plug>(skkeleton-toggle)
  " call skkeleton#config({
  " \'eggLikeNewline': v:true,
  " \'globalJisyo': '~/.config/eskk/SKK-JISYO.L',
  " \})
    function! s:skkeleton_init() abort
call skkeleton#config({
  \ 'eggLikeNewline': v:true
  \'globalJisyo': '~/.config/eskk/SKK-JISYO.L',
  \ })
call skkeleton#register_kanatable('rom', {
  \ "z\<Space>": ["\u3000", ''],
  \ })
endfunction
augroup skkeleton-initialize-pre
autocmd!
autocmd User skkeleton-initialize-pre call s:skkeleton_init()
augroup END
'''

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_source = 'ddc.vim'
hook_add = '''
  let g:vsnip_snippet_dir = expand('~/.vim/snippets')
  let g:vsnip_filetypes = {}
  let g:vsnip_filetypes.javascriptreact = ['javascript']
  let g:vsnip_filetypes.typescriptreact = ['typescript']
'''

 [[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_source = 'ddc.vim'

[[plugins]]
repo = 'rafamadriz/friendly-snippets'
on_source = 'vim-vsnip'
