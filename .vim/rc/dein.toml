[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'junegunn/fzf'
build = './install'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'

# git
[[plugins]]
# git diff, log
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = '''
  colorscheme onedark
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
       \ 'colorscheme': 'onedark',
       \ 'active': {
       \   'right': [ [ 'lineinfo' ],
       \              [ 'percent' ],
       \              [ 'empty' ] ]
       \ },
       \ 'component_function': {
       \   'filename': 'LightlineFilename',
       \   'empty': 'Empty'
       \ }
       \ }
        " \   'paneinfo': 'PaneInfo',
        " \   'left':  [ ['paneinfo'] ],
  " function! PaneInfo()
  "   return %{winnr()}
  " endfunction
  "
  function! Empty()
    return ""
  endfunction

  function! LightlineFilename()
    return &filetype ==# 'vimfiler' ? vimfiler#get_status_string() :
         \ &filetype ==# 'unite' ? unite#get_status_string() :
         \ &filetype ==# 'vimshell' ? vimshell#get_status_string() :
         \ expand('%:p') !=# '' ? expand('%:p') : '[No Name]'
  endfunction
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

# カーソル位置のコンテキストに合わせてftを切り替える
# [[plugins]]
# repo = 'osyo-manga/vim-precious'
# depends = ['context_filetype.vim']

# # # https://muunyblue.github.io/520bae6649b42ff5a3c8c58b7fcfc5a9.html
# [[plugins]]
# repo = 'autozimu/LanguageClient-neovim'
# rev = 'next'
# # depends = ['deoplete.nvim']
# build = 'bash install.sh'
# # on_ft = ['vue', 'cpp']

# [[plugins]]
# repo = 'rizzatti/dash.vim'
# hook_add = 'nmap <silent> <Leader>d <Plug>DashSearch'

# lsp
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
build = 'npm install -g  typescript-language-server'

[[plugins]]
repo = 'mattn/vim-lsp-settings'

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'Lokaltog/vim-easymotion'

[[plugins]]
repo = 'prabirshrestha/async.vim'

# cpp
[[plugins]]
repo = 'vim-jp/vim-cpp'

[[plugins]]
repo = 'digitaltoad/vim-pug'

[[plugins]]
repo = 'pangloss/vim-javascript'

# highlight ts syntax
[[plugins]]
repo = 'leafgarland/typescript-vim'

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo='kshenoy/vim-signature'
hook_add = '''
  let g:SignatureMap = {
    \ 'GotoNextLineAlpha'  :  "",
    \ 'GotoPrevLineAlpha'  :  "",
    \ }
'''

[[plugins]]
repo ="kristijanhusak/defx-git"
hook_add = '''
  let g:defx_git#indicators = {
    \ 'Modified'  : '+',
    \ 'Staged'    : '●',
    \ 'Untracked' : '?',
    \ 'Renamed'   : '➜',
    \ 'Unmerged'  : '═',
    \ 'Deleted'   : 'x',
    \ 'Unknown'   : '?'
    \ }
'''

[[plugins]]
repo ="kristijanhusak/defx-icons"

[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['defx-git', 'defx-icons']
hook_add = '''
call defx#custom#column('icon', {
      \ 'directory_icon': '▸',
      \ 'opened_icon': '▾',
      \ 'root_icon': ' ',
      \ })

call defx#custom#column('filename', {
      \ 'min_width': 40,
      \ 'max_width': 40,
      \ })

call defx#custom#column('mark', {
      \ 'readonly_icon': '✗',
      \ 'selected_icon': '✓',
      \ })

call defx#custom#option('_', {
      \ 'columns': 'indent:git:icons:filename',
      \ 'show_ignored_files': 1,
      \ })

nnoremap <silent><C-t> :<C-u>Defx -new<CR>
nnoremap <silent><C-c> :<C-u>Defx -new `expand('%:p:h')` -search=`expand('%:p')`<CR>
autocmd FileType defx call s:defx_my_settings()
  function! s:defx_my_settings() abort
    " Define mappings
    nnoremap <silent><buffer><expr> <CR> defx#do_action('open')
    nnoremap <silent><buffer><expr> c defx#do_action('copy')
    nnoremap <silent><buffer><expr> m defx#do_action('move')
    nnoremap <silent><buffer><expr> p defx#do_action('paste')
    nnoremap <silent><buffer><expr> l defx#do_action('open')
    nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
    nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
    nnoremap <silent><buffer><expr> o defx#do_action('open_or_close_tree')
    nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N defx#do_action('new_file')
    nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
    nnoremap <silent><buffer><expr> C defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
    nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'time')
    nnoremap <silent><buffer><expr> d defx#do_action('remove')
    nnoremap <silent><buffer><expr> r defx#do_action('rename')
    nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> ; defx#do_action('repeat')
    nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
    nnoremap <silent><buffer><expr> q defx#do_action('quit')
    nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
    nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
    nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
    nnoremap <silent><buffer><expr> cd defx#do_action('change_vim_cwd')
  endfunction
'''
